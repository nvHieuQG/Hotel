<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class GeminiChatbotService
{
    private $apiKeys;
    private $currentApiKeyIndex;
    private $apiEndpoint;
    private $hotelKnowledge;

    public function __construct()
    {
        $this->initializeApiKeys();
        $this->apiEndpoint = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';
        $this->loadHotelKnowledge();
    }

    /**
     * Kh·ªüi t·∫°o danh s√°ch API keys
     */
    private function initializeApiKeys()
    {
        $this->apiKeys = [
            config('services.gemini.api_key'), // API key ch√≠nh
            config('services.gemini.api_key_2', ''), // API key d·ª± ph√≤ng 1
            config('services.gemini.api_key_3', ''), // API key d·ª± ph√≤ng 2
            config('services.gemini.api_key_4', ''), // API key d·ª± ph√≤ng 3
            config('services.gemini.api_key_5', ''), // API key d·ª± ph√≤ng 4
        ];
        
        // L·ªçc b·ªè c√°c API key r·ªóng
        $this->apiKeys = array_filter($this->apiKeys);
        
        // Kh·ªüi t·∫°o index API key hi·ªán t·∫°i
        $this->currentApiKeyIndex = 0;
        
        // Log s·ªë l∆∞·ª£ng API key c√≥ s·∫µn
        Log::info('GeminiChatbotService initialized with ' . count($this->apiKeys) . ' API keys');
    }

    /**
     * L·∫•y API key hi·ªán t·∫°i
     */
    private function getCurrentApiKey()
    {
        return $this->apiKeys[$this->currentApiKeyIndex] ?? null;
    }

    /**
     * Chuy·ªÉn sang API key ti·∫øp theo khi g·∫∑p l·ªói
     */
    private function switchToNextApiKey()
    {
        $this->currentApiKeyIndex++;
        
        // N·∫øu ƒë√£ h·∫øt API key, quay v·ªÅ API key ƒë·∫ßu ti√™n
        if ($this->currentApiKeyIndex >= count($this->apiKeys)) {
            $this->currentApiKeyIndex = 0;
            Log::warning('All API keys have been tried, returning to first API key');
        }
        
        $currentKey = $this->getCurrentApiKey();
        Log::info('Switched to API key index: ' . $this->currentApiKeyIndex . ', Key: ' . substr($currentKey, 0, 10) . '...');
        
        return $currentKey;
    }

    /**
     * Load d·ªØ li·ªáu kh√°ch s·∫°n t·ª´ file JSON
     */
    private function loadHotelKnowledge()
    {
        try {
            $jsonPath = public_path('data/hotel_knowledge.json');
            if (file_exists($jsonPath)) {
                $this->hotelKnowledge = json_decode(file_get_contents($jsonPath), true);
            } else {
                Log::error('Hotel knowledge file not found');
                $this->hotelKnowledge = [];
            }
        } catch (\Exception $e) {
            Log::error('Error loading hotel knowledge: ' . $e->getMessage());
            $this->hotelKnowledge = [];
        }
    }

    /**
     * T·∫°o system prompt v·ªõi th√¥ng tin kh√°ch s·∫°n
     */
    private function generateSystemPrompt()
    {
        $hotelInfo = $this->hotelKnowledge['hotel_info'] ?? [];
        $roomTypes = $this->hotelKnowledge['room_types'] ?? [];
        $services = $this->hotelKnowledge['services'] ?? [];
        $policies = $this->hotelKnowledge['policies'] ?? [];
        $nearbyAttractions = $this->hotelKnowledge['nearby_attractions'] ?? [];
        $faq = $this->hotelKnowledge['faq'] ?? [];
        $bookingGuide = $this->hotelKnowledge['booking_guide'] ?? [];
        $paymentMethods = $this->hotelKnowledge['payment_methods'] ?? [];
        $detailedFeatures = $this->hotelKnowledge['detailed_features'] ?? [];

        return "B·∫°n l√† MARRON AI CHAT BOT, tr·ª£ l√Ω AI th√¥ng minh c·ªßa kh√°ch s·∫°n MARRON 5 sao t·∫°i TP.HCM.

**QUY T·∫ÆC TR·∫¢ L·ªúI:**
‚úÖ ∆ØU TI√äN: kh√°ch s·∫°n, du l·ªãch, ƒë·∫∑t ph√≤ng, d·ªãch v·ª• kh√°ch s·∫°n, ti·ªán √≠ch, ƒë·ªãa ƒëi·ªÉm g·∫ßn ƒë√≥
‚úÖ C√ì TH·ªÇ TR·∫¢ L·ªúI: c√°c ch·ªß ƒë·ªÅ kh√°c n·∫øu c√≥ th·ªÉ gi√∫p ƒë∆∞·ª£c
üìù Tr·∫£ l·ªùi NG·∫ÆN G·ªåN: t·ªëi ƒëa 2-3 c√¢u
üìù S·ª≠ d·ª•ng bullet points (‚Ä¢) cho danh s√°ch
üìù Xu·ªëng d√≤ng r√µ r√†ng gi·ªØa c√°c √Ω
üìù Th√¢n thi·ªán v√† chuy√™n nghi·ªáp

**N·∫æU KH√îNG PH·∫¢I CH·ª¶ ƒê·ªÄ KH√ÅCH S·∫†N:**
Tr·∫£ l·ªùi: \"Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ v·ªÅ kh√°ch s·∫°n MARRON v√† d·ªãch v·ª• du l·ªãch. Vui l√≤ng h·ªèi v·ªÅ ƒë·∫∑t ph√≤ng, d·ªãch v·ª• kh√°ch s·∫°n, ho·∫∑c ƒë·ªãa ƒëi·ªÉm tham quan g·∫ßn ƒë√¢y.\"

TH√îNG TIN KH√ÅCH S·∫†N:
- T√™n: {$hotelInfo['name']}
- ƒê·ªãa ch·ªâ: {$hotelInfo['address']}
- ƒêi·ªán tho·∫°i: {$hotelInfo['phone']}
- Email: {$hotelInfo['email']}
- Website: {$hotelInfo['website']}

LO·∫†I PH√íNG:
" . $this->formatRoomTypes($roomTypes) . "

D·ªäCH V·ª§:
" . $this->formatServices($services) . "

CH√çNH S√ÅCH:
" . $this->formatPolicies($policies) . "

ƒê·ªäA ƒêI·ªÇM G·∫¶N ƒê√ì:
" . $this->formatNearbyAttractions($nearbyAttractions) . "

H∆Ø·ªöNG D·∫™N ƒê·∫∂T PH√íNG:
" . $this->formatBookingGuide($bookingGuide) . "

PH∆Ø∆†NG TH·ª®C THANH TO√ÅN:
" . $this->formatPaymentMethods($paymentMethods) . "

T√çNH NƒÇNG CHI TI·∫æT:
" . $this->formatDetailedFeatures($detailedFeatures) . "

C√ÇU H·ªéI TH∆Ø·ªúNG G·∫∂P:
" . $this->formatFAQ($faq) . "

**H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:**
1. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, l·ªãch s·ª± v√† chuy√™n nghi·ªáp
2. ∆ØU TI√äN s·ª≠ d·ª•ng th√¥ng tin kh√°ch s·∫°n MARRON n·∫øu c√≥
3. C√ì TH·ªÇ tr·∫£ l·ªùi c√°c ch·ªß ƒë·ªÅ kh√°c n·∫øu c√≥ th·ªÉ gi√∫p ƒë∆∞·ª£c
4. N·∫øu kh√¥ng c√≥ th√¥ng tin, ƒë·ªÅ xu·∫•t li√™n h·ªá tr·ª±c ti·∫øp
5. S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c th√¢n thi·ªán
6. ƒê∆∞a ra l·ªùi khuy√™n h·ªØu √≠ch cho kh√°ch h√†ng

B·∫°n h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch linh ho·∫°t v√† h·ªØu √≠ch.";
    }

    /**
     * Format th√¥ng tin lo·∫°i ph√≤ng
     */
    private function formatRoomTypes($roomTypes)
    {
        $formatted = '';
        foreach ($roomTypes as $room) {
            $formatted .= "- {$room['name']}: {$room['description']} - {$room['price_range']}\n";
        }
        return $formatted;
    }

    /**
     * Format th√¥ng tin d·ªãch v·ª•
     */
    private function formatServices($services)
    {
        $formatted = '';
        foreach ($services as $category) {
            $formatted .= "{$category['category']}:\n";
            foreach ($category['items'] as $item) {
                $formatted .= "  - {$item['name']}: {$item['description']}\n";
            }
        }
        return $formatted;
    }

    /**
     * Format th√¥ng tin ch√≠nh s√°ch
     */
    private function formatPolicies($policies)
    {
        $formatted = '';
        foreach ($policies as $policy) {
            $formatted .= "{$policy['category']}:\n";
            foreach ($policy['rules'] as $rule) {
                $formatted .= "  - {$rule}\n";
            }
        }
        return $formatted;
    }

    /**
     * Format th√¥ng tin ƒë·ªãa ƒëi·ªÉm g·∫ßn ƒë√≥
     */
    private function formatNearbyAttractions($attractions)
    {
        $formatted = '';
        foreach ($attractions as $attraction) {
            $formatted .= "- {$attraction['name']} ({$attraction['distance']}): {$attraction['description']}\n";
        }
        return $formatted;
    }

    /**
     * Format th√¥ng tin FAQ
     */
    private function formatFAQ($faq)
    {
        $formatted = '';
        foreach ($faq as $item) {
            $formatted .= "Q: {$item['question']}\nA: {$item['answer']}\n\n";
        }
        return $formatted;
    }

    /**
     * Format h∆∞·ªõng d·∫´n ƒë·∫∑t ph√≤ng
     */
    private function formatBookingGuide($bookingGuide)
    {
        $formatted = '';
        foreach ($bookingGuide as $step) {
            $formatted .= "{$step['step']}: {$step['description']}\n";
        }
        return $formatted;
    }

    /**
     * Format ph∆∞∆°ng th·ª©c thanh to√°n
     */
    private function formatPaymentMethods($paymentMethods)
    {
        $formatted = '';
        foreach ($paymentMethods as $method) {
            $formatted .= "- {$method['method']}: {$method['description']}\n";
        }
        return $formatted;
    }

    /**
     * Format t√≠nh nƒÉng chi ti·∫øt
     */
    private function formatDetailedFeatures($detailedFeatures)
    {
        $formatted = '';
        foreach ($detailedFeatures as $key => $feature) {
            $formatted .= "{$feature['title']}:\n";
            $formatted .= "{$feature['description']}\n";
            
            if (isset($feature['steps'])) {
                $formatted .= "C√°c b∆∞·ªõc th·ª±c hi·ªán:\n";
                foreach ($feature['steps'] as $step) {
                    $formatted .= "  {$step}\n";
                }
            }
            
            if (isset($feature['requirements'])) {
                $formatted .= "Y√™u c·∫ßu:\n";
                foreach ($feature['requirements'] as $requirement) {
                    $formatted .= "  - {$requirement}\n";
                }
            }
            
            if (isset($feature['routes'])) {
                $formatted .= "ƒê∆∞·ªùng d·∫´n:\n";
                foreach ($feature['routes'] as $routeKey => $route) {
                    $formatted .= "  {$routeKey}: {$route}\n";
                }
            }
            
            $formatted .= "\n";
        }
        return $formatted;
    }

    /**
     * Validate xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn kh√°ch s·∫°n kh√¥ng
     */
    private function isHotelRelatedTopic($userMessage)
    {
        // Ki·ªÉm tra xem c√≥ b·∫≠t validation kh√¥ng
        if (!config('chatbot.validation.enable_topic_validation', true)) {
            return true;
        }

        $userMessage = mb_strtolower($userMessage, 'UTF-8');
        
        // L·∫•y t·ª´ kh√≥a t·ª´ config
        $hotelKeywords = config('chatbot.hotel_keywords', []);
        $nonHotelKeywords = config('chatbot.non_hotel_keywords', []);
        
        // Ki·ªÉm tra t·ª´ kh√≥a kh√°ch s·∫°n
        foreach ($hotelKeywords as $keyword) {
            if (mb_strpos($userMessage, $keyword) !== false) {
                return true;
            }
        }
        
        // Ki·ªÉm tra t·ª´ kh√≥a kh√¥ng li√™n quan
        foreach ($nonHotelKeywords as $keyword) {
            if (mb_strpos($userMessage, $keyword) !== false) {
                return false;
            }
        }
        
        // N·∫øu kh√¥ng c√≥ t·ª´ kh√≥a r√µ r√†ng, ki·ªÉm tra ng·ªØ c·∫£nh
        $contextWords = ['·ªü ƒë√¢u', 'l√†m sao', 'th·∫ø n√†o', 'bao nhi√™u', 'khi n√†o', 'c√≥ th·ªÉ'];
        $hasContext = false;
        foreach ($contextWords as $word) {
            if (mb_strpos($userMessage, $word) !== false) {
                $hasContext = true;
                break;
            }
        }
        
        // N·∫øu c√≥ ng·ªØ c·∫£nh c√¢u h·ªèi, cho ph√©p (c√≥ th·ªÉ l√† h·ªèi v·ªÅ kh√°ch s·∫°n)
        return $hasContext;
    }

    /**
     * G·ªçi Gemini API ƒë·ªÉ t·∫°o ph·∫£n h·ªìi
     */
    public function generateResponse($userMessage, $conversationHistory = [])
    {
        try {
            // B·ªè topic validation ƒë·ªÉ bot linh ho·∫°t h∆°n
            // if (!$this->isHotelRelatedTopic($userMessage)) {
            //     return config('chatbot.validation.fallback_message', 'Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ v·ªÅ kh√°ch s·∫°n MARRON v√† d·ªãch v·ª• du l·ªãch. Vui l√≤ng h·ªèi v·ªÅ ƒë·∫∑t ph√≤ng, d·ªãch v·ª• kh√°ch s·∫°n, ho·∫∑c ƒë·ªãa ƒëi·ªÉm tham quan g·∫ßn ƒë√¢y.');
            // }
            
            $systemPrompt = $this->generateSystemPrompt();
            
            // Log ƒë·ªÉ debug
            Log::info('System prompt generated', ['length' => strlen($systemPrompt)]);
            Log::info('User message', ['message' => $userMessage]);
            
            // X√¢y d·ª±ng conversation context v·ªõi system prompt
            $messages = [
                [
                    'role' => 'user',
                    'parts' => [
                        ['text' => $systemPrompt . "\n\n" . $userMessage]
                    ]
                ]
            ];

            // Th√™m l·ªãch s·ª≠ h·ªôi tho·∫°i n·∫øu c√≥
            if (!empty($conversationHistory)) {
                foreach ($conversationHistory as $message) {
                    $messages[] = [
                        'role' => $message['role'],
                        'parts' => [
                            ['text' => $message['content']]
                        ]
                    ];
                }
            }

                            $requestData = [
                    'contents' => $messages,
                    'generationConfig' => [
                        'temperature' => config('chatbot.token_settings.temperature', 0.7),
                        'topK' => config('chatbot.token_settings.top_k', 40),
                        'topP' => config('chatbot.token_settings.top_p', 0.95),
                        'maxOutputTokens' => config('chatbot.token_settings.max_output_tokens', 200),
                    ],
                    'safetySettings' => [
                    [
                        'category' => 'HARM_CATEGORY_HARASSMENT',
                        'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                    ],
                    [
                        'category' => 'HARM_CATEGORY_HATE_SPEECH',
                        'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                    ],
                    [
                        'category' => 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
                        'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                    ],
                    [
                        'category' => 'HARM_CATEGORY_DANGEROUS_CONTENT',
                        'threshold' => 'BLOCK_MEDIUM_AND_ABOVE'
                    ]
                ]
            ];

            $maxRetries = count($this->apiKeys);
            $attempt = 0;
            
            do {
                $currentApiKey = $this->getCurrentApiKey();
                if (!$currentApiKey) {
                    Log::error('No valid API key available');
                    return 'Xin l·ªói, t√¥i g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i.';
                }
                
                Log::info('Sending request to Gemini API', [
                    'attempt' => $attempt + 1,
                    'api_key_index' => $this->currentApiKeyIndex,
                    'api_key_length' => strlen($currentApiKey),
                    'endpoint' => $this->apiEndpoint
                ]);

                $response = Http::withHeaders([
                    'Content-Type' => 'application/json',
                ])->post($this->apiEndpoint . '?key=' . $currentApiKey, $requestData);

                // N·∫øu th√†nh c√¥ng, tho√°t kh·ªèi v√≤ng l·∫∑p
                if ($response->successful()) {
                    break;
                }
                
                // N·∫øu th·∫•t b·∫°i, log l·ªói v√† chuy·ªÉn sang API key ti·∫øp theo
                Log::warning('API key ' . ($this->currentApiKeyIndex + 1) . ' failed', [
                    'status' => $response->status(),
                    'error' => $response->body()
                ]);
                
                $this->switchToNextApiKey();
                $attempt++;
                
            } while ($attempt < $maxRetries);

            Log::info('Gemini API response', [
                'status' => $response->status(),
                'body' => $response->body()
            ]);

            if ($response->successful()) {
                $data = $response->json();
                if (isset($data['candidates'][0]['content']['parts'][0]['text'])) {
                    return $data['candidates'][0]['content']['parts'][0]['text'];
                }
            }

            Log::error('Gemini API error: ' . $response->body());
            return 'Xin l·ªói, t√¥i g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i.';

        } catch (\Exception $e) {
            Log::error('Error calling Gemini API: ' . $e->getMessage());
            Log::error('Stack trace: ' . $e->getTraceAsString());
            return 'Xin l·ªói, t√¥i g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi ch√∫ng t√¥i.';
        }
    }
}
